Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-09-18T17:40:22-04:00

====== Ocaml ======
Created Friday 18 September 2020


===== TIPS: =====

== How to compile OCaml: ==
1. in terminal : direct to the path and : ocamlc xxx.ml, then you will see a new file ends with .cmo. To run the file, ocaml xxx.cmo.
2. in Ocaml: open terminal  and go to the correspoing path by cd...... then type ocaml you see an interactive interface, you see the version of Ocaml. ## use "filename.ml;";;  or ## load "file.cmo";; to execute the compiled file
3. Using Emacs  Esc-x type 'shell' to terminal,  type ocaml to (2).    
4. Printf.printf "%B" (3 < 4);;  
5. 代码块内的普通语句间隔时使用单独的分号 ;    top-level之间的间隔需要两个分号 ;;

== Basic Knowledge: ==
在ocaml互动界面，如果是use或者load等指令 需要再加一个#， 如果是print_int或者其他ocaml代码，则不需要增加#。
code example:
let rec concatn s n = 
  if n<=0 then
	s
  else
	s ^ (concatn s (n-1))
let x = 3
let y = x * 2;;
print_int x;;
print_int y;;

===== Course Note: =====

== Sept 16th: ==

1. type:
 if bool then
e1
else
e2
Note: e1 and e2 must be in the same type!!!

2. single quote 'c' is char type, double quotes"str" is string type

3.Abstraction and abbreviation:

local variable in let: (let ..in)  let... in is an experssion

let x = 2 in 
let y = x*x in 
let z = y*x in
z*y;;

After the execution, we lose all these local variables.

4. let without in  is declaration (top-level)
let x = 3+3
let y = x*2

do not need to use(optional) ;; if next is another let declaration or some key word; if next is let..in experssion, then do need ;;

5. rec is a mandatory keyword for recursive function, it does not hurt if the func is not recursive.

== Sept 18th: ==
1.binding varaiables to values:
in OCaml, one varaiable has only one value, can not be changed.
let x = 3
let x = 4
It happens to have two varaibles of the same name, does not mean we change the value of x.

2.defining functions:
let add_one (x:int) : int = 1 + x
let function name (argument name : type of argument ) : type of result = expression that computers value produced by function. recursive functions begin with "let rec"

3.ocaml里的func name或者variable name可以带' prime.

4.define function with a local definition:
let add_two' (x:int):int =
  let add_one x' = 1+x' in
	add_one (add one x)
add_one 是local function definition, which is hidden from clients. 
function definition如果没有type, OCaml can figure them out. 
Note:
let x' = 3
let x' = 1+x'
a new variable has the same name x' is assigned the value 1+3. 
5. rule for type-checking functions: it is very important to have and use the correct typed functions(both arugument type and return type) 
	e.g. munge : bool -> int -> string (两种理解，看视频 around 1h,slide 47)
			 munge false: int -> string
			 munge false 3 : string
e.g. function works as argument
 reference: https://www.cs.cornell.edu/courses/cs3110/2014sp/recitations/3/rec03.html
(* Notice the type of twice is ((int -> int) * int) -> int.*)
let twice ((f: int-> int),(x:int)): int = f (f x)
let double (x:int): int = x*2
let quad (x:int): int = twice (double,x);; # 此处即作为tuple
print_int (quad 5);;

6. data structure: tuples
tuple can contain different types, and it can contain function
e.g. let x = ("hi",3-2,true)
val x: string * int * bool = ("hi",1,true)   * is star in the tuple,not multiply
another e.g. let (x,y) = (2,4) in x + x + y
→ substitue  2+2 + 4  and x is type int, y is type int 
rules: if e1:t1 and e2:t2, then (e1,e2) : t1 * t2

7. a type abbreviation by using type keword
type point = float *  float  # every time we see point, it is replaced by float*float
let keyword: define variable and function

== Sept 23th ==
**补充前面function的理解**

let func (x:int):char= if x <0 then 'n' else 'p'
  let func2 (x:int) (y:bool): int->char=
	 if y then func    # func后面没有跟argument,因为func2的return type是int->char. (function is also data)
	 else func2 x y

let add (x:int) (y:int) : int = x + y
val add : int -> int -> int = <fun>
let c = add 3;;
val c : int -> int = <fun> 
c得到的是function
# let y = c 4;;
val y : int = 7
--------------------
1. unit, written as () means return nothing.  if a function only print, then  the return type is unit.

2. pattern matching, 比如一个tuple  let t = (3,4.0,"as") , let (x,y,z) = t. 则xyz被分配t中的对应值
也可以用 match t with
					 | (x,y,z)
type point = float * float
p1 和p2是point类型,则可以==>
match (p1,p2) with  
| ( (x1,y1), (x2,y2))
也可以用let:   let ((x1,y1),(x2,y2))=(p1,p2);;
但是match 可以match很多可能性，使用| .

3. options，代表着一些参数可以存在，也可以不存在。
Some和None是创建optional value的构造函数。
type point = float * float
let slope (p1:point) (p2:point) : float option =    (*需要说明return type是option*)
  let (x1,y1) = p1 in
  let (x2,y2) = p2 in
  let xd = x2 -. x1 in
  if xd != 0.0 then
	Some ((y2 -. y1) /. xd)                     (*需要用Some关键词表明type是float option;如果没有Some,则type是float,会造成type dismatch error*)
  else
	None

使用returntype是带option的function时候，需要确认返回的值是some 还是none，
e.g.:
let print_slope (p1:point) (p2:point) : unit =
  match slope p1 p2 with
  | Some s ->                                            (*The "Some s" pattern includes the variable s*)
	  print_string ("Slope: " ^ string_of_float s)
  | None ->
	print_string "Vertical line.\n"
总结：
（1）如果function的输出为 type t option，construct使用 Some(...) None
（2）如果input类型为t option, deconstruct 使用 match ... with  
																											 | None -> ...
																											 | Some s -> ...

4. data type: list 
t = [ ] empty list
v :: vs   v followed by vs
:: callls cons

(1+2)::(3+4)::[] has a type int list
或者 let l = [3;7];; 

# [2]::[4;6]::[];;                          ⇒ (int list) list
- : int list list = [ [2]; [4; 6] ]

[2]::[3];;
Error: This expression has type int but an expression was expected of type
		 int list ===>需要在后面加上::[]
another word: if e1: t and e2 : t list
								 then (e1::e2) : t list
# let a = [3];;
val a : int list = [3]
# let b = [2];;
val b : int list = [2]
# a@b;;
- : int list = [3; 2]



== Sept 25th ==
1. Write a function to return the head of a list
let head (xs : int list) : int option =             (有可能是空的list,所以用option修饰)
| [] -> None
| hd :: _ -> Some head          (_ underscore 用法和python 一样，不caer的值。此处用Some) 
并不是rec function

2. | 是match里的separator，第一个| 是optional的

3. (* zip function: if sub list are in different length, return None.
otherwise, transpose the lsit
zip [2; 3] [4; 5] == Some [(2,4); (3,5)]*)

let rec zip (xs: int list) (ys: int list) : (int * int) list option = 
  match (xs,ys) with 
  | ([], []) -> Some []
  | ([], y::ys') -> None
  | (x::xs',[]) -> None
  | (x::xs',y::ys') ->  match zip xs' ys' with
						| Some zs -> Some((x,y)::zs)    (*the 'Some' before zs is pattern mathing the possible value*)
						| None -> None                      (*the 'Some' before ((x,y)::zs) is key work paired with None*)

4. Insertion sort in code file named sept25.ml


== Sept 30th ==
1. example codes are in higher_order.ml.
higher-order function: function as input
fun is keyword, define the function with no name (anonymous)=> fun x-> x+1  (means input x, output x+1)

ways to clear, reusable code:
1. higher-order function (use another function as a input argument)
2. anoymous function ( in the first-class function, define an anonymous function as input)
3. first-class function: input and output of an argument, most general way
4. polymorphism ( use most general type, 'a 'b, let ocaml do type inference when call the function)


2. user defined data types/ abstraction/ mutation (imperative programming)
type point = float*float is type abbreviation, not type defination

type color = B|Y|R ( in the file data_type.ml)
this is used to define the data type , they can be used as option
type shape = Circle of point * raidus | Square of point*side
of is a keyword, means type Circle is in the form of point*radius.

introduce and implement tree in OCaml. ( in the file inductive_data_tree.ml)
Define tree data type, also give examples that tree with any type key and value.


== Oct 2nd: ==
Reviewed the integer and natural number data type and rec function( integer can be negative, but natural number is 0,1,2,...)

Review the tree related data type in OCaml, we define the type : 
type 'x f = body
arg f
Which is different from other languages. OCaml takes types as functions: a function that take a type as an argument, produces a type as a result.

Modules and abstract data types

How to build a new abstract data type:
1. signature : an interface (.mli file)
2. strucutre: is an implementation
3. functor: a parameterized module
 https://lanqy.xyz/2018/07/15/getting_started4/

How to use :
1. use dot notation to refer to contents of Name.ml e.g.,  Name.x
2. Open Name, get access to all the elements,  then just use x directly...
